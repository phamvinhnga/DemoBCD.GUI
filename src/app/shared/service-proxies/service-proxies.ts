/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.3.1.0 (NJsonSchema v9.14.1.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

import * as moment from 'moment';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class AbcServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    a(): Observable<void> {
        let url_ = this.baseUrl + "/api/Abc/A";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processA(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processA(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processA(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @return Success
     */
    abc(): Observable<void> {
        let url_ = this.baseUrl + "/api/Abc/Abc";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAbc(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAbc(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processAbc(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class AuthenticationServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getCurrentUser(): Observable<UserOutputDto> {
        let url_ = this.baseUrl + "/api/Authentication/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCurrentUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCurrentUser(<any>response_);
                } catch (e) {
                    return <Observable<UserOutputDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserOutputDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetCurrentUser(response: HttpResponseBase): Observable<UserOutputDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? UserOutputDto.fromJS(resultData200) : new UserOutputDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserOutputDto>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    login(body: AuthenticateDto | undefined): Observable<AuthenticateOutputDto> {
        let url_ = this.baseUrl + "/api/Authentication/Login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(<any>response_);
                } catch (e) {
                    return <Observable<AuthenticateOutputDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<AuthenticateOutputDto>><any>_observableThrow(response_);
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<AuthenticateOutputDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AuthenticateOutputDto.fromJS(resultData200) : new AuthenticateOutputDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AuthenticateOutputDto>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    register(body: RegisterUserInputDto | undefined): Observable<RegisterUserOutputDto> {
        let url_ = this.baseUrl + "/api/Authentication/Register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegister(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegister(<any>response_);
                } catch (e) {
                    return <Observable<RegisterUserOutputDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<RegisterUserOutputDto>><any>_observableThrow(response_);
        }));
    }

    protected processRegister(response: HttpResponseBase): Observable<RegisterUserOutputDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RegisterUserOutputDto.fromJS(resultData200) : new RegisterUserOutputDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RegisterUserOutputDto>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateAvatarUser(body: FileInputDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Authentication/UpdateAvatarUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateAvatarUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateAvatarUser(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateAvatarUser(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateInfomationUser(body: UpdateUserInfomationInputDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Authentication/UpdateInfomationUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateInfomationUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateInfomationUser(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateInfomationUser(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    updateUserPassword(input: string | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Authentication/UpdateUserPassword?";
        if (input !== undefined)
            url_ += "input=" + encodeURIComponent("" + input) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateUserPassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateUserPassword(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateUserPassword(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class FileServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param folder (optional) 
     * @param id (optional) 
     * @return Success
     */
    getFile(folder: string | null | undefined, id: string | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/File/GetFile?";
        if (folder !== undefined)
            url_ += "folder=" + encodeURIComponent("" + folder) + "&"; 
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFile(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processGetFile(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class OrganizationServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    create(body: OrganizationInputDto | undefined): Observable<OrganizationOutputDto> {
        let url_ = this.baseUrl + "/api/Organization/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<OrganizationOutputDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<OrganizationOutputDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<OrganizationOutputDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? OrganizationOutputDto.fromJS(resultData200) : new OrganizationOutputDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OrganizationOutputDto>(<any>null);
    }

    update(body: OrganizationInputDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Organization/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 ? ProblemDetails.fromJS(resultData404) : new ProblemDetails();
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateTitleOrganization(body: TitleOrganizationInputDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Organization/UpdateTitleOrganization";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateTitleOrganization(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateTitleOrganization(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateTitleOrganization(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    exportExcelOrganizationTitle(body: PaginationInputDto | undefined): Observable<FileOutputDto> {
        let url_ = this.baseUrl + "/api/Organization/ExportExcelOrganizationTitle";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcelOrganizationTitle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcelOrganizationTitle(<any>response_);
                } catch (e) {
                    return <Observable<FileOutputDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileOutputDto>><any>_observableThrow(response_);
        }));
    }

    protected processExportExcelOrganizationTitle(response: HttpResponseBase): Observable<FileOutputDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileOutputDto.fromJS(resultData200) : new FileOutputDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileOutputDto>(<any>null);
    }

    /**
     * @return Success
     */
    get(id: string): Observable<OrganizationOutputDto> {
        let url_ = this.baseUrl + "/api/Organization/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<OrganizationOutputDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<OrganizationOutputDto>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<OrganizationOutputDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? OrganizationOutputDto.fromJS(resultData200) : new OrganizationOutputDto();
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 ? ProblemDetails.fromJS(resultData404) : new ProblemDetails();
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OrganizationOutputDto>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    exportExcelDefault(body: PaginationInputDto | undefined): Observable<FileOutputDto> {
        let url_ = this.baseUrl + "/api/Organization/ExportExcelDefault";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcelDefault(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcelDefault(<any>response_);
                } catch (e) {
                    return <Observable<FileOutputDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileOutputDto>><any>_observableThrow(response_);
        }));
    }

    protected processExportExcelDefault(response: HttpResponseBase): Observable<FileOutputDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileOutputDto.fromJS(resultData200) : new FileOutputDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileOutputDto>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getAll(body: PaginationInputDto | undefined): Observable<OrganizationOutputDtoPaginationOutputDto> {
        let url_ = this.baseUrl + "/api/Organization/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<OrganizationOutputDtoPaginationOutputDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<OrganizationOutputDtoPaginationOutputDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<OrganizationOutputDtoPaginationOutputDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? OrganizationOutputDtoPaginationOutputDto.fromJS(resultData200) : new OrganizationOutputDtoPaginationOutputDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OrganizationOutputDtoPaginationOutputDto>(<any>null);
    }

    /**
     * @return Success
     */
    getList(): Observable<OrganizationOutputDto[]> {
        let url_ = this.baseUrl + "/api/Organization/GetList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(<any>response_);
                } catch (e) {
                    return <Observable<OrganizationOutputDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<OrganizationOutputDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<OrganizationOutputDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(OrganizationOutputDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OrganizationOutputDto[]>(<any>null);
    }

    delete(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Organization/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 ? ProblemDetails.fromJS(resultData404) : new ProblemDetails();
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class TitleServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    create(body: TitleInputDto | undefined): Observable<TitleOutputDto> {
        let url_ = this.baseUrl + "/api/Title/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<TitleOutputDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<TitleOutputDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<TitleOutputDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? TitleOutputDto.fromJS(resultData200) : new TitleOutputDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TitleOutputDto>(<any>null);
    }

    update(body: TitleInputDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Title/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 ? ProblemDetails.fromJS(resultData404) : new ProblemDetails();
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    delete(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Title/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 ? ProblemDetails.fromJS(resultData404) : new ProblemDetails();
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @return Success
     */
    get(id: string): Observable<TitleOutputDto> {
        let url_ = this.baseUrl + "/api/Title/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<TitleOutputDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<TitleOutputDto>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<TitleOutputDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? TitleOutputDto.fromJS(resultData200) : new TitleOutputDto();
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 ? ProblemDetails.fromJS(resultData404) : new ProblemDetails();
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TitleOutputDto>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    exportExcelDefault(body: PaginationInputDto | undefined): Observable<FileOutputDto> {
        let url_ = this.baseUrl + "/api/Title/ExportExcelDefault";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcelDefault(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcelDefault(<any>response_);
                } catch (e) {
                    return <Observable<FileOutputDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileOutputDto>><any>_observableThrow(response_);
        }));
    }

    protected processExportExcelDefault(response: HttpResponseBase): Observable<FileOutputDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileOutputDto.fromJS(resultData200) : new FileOutputDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileOutputDto>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getAll(body: PaginationInputDto | undefined): Observable<TitleOutputDtoPaginationOutputDto> {
        let url_ = this.baseUrl + "/api/Title/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<TitleOutputDtoPaginationOutputDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<TitleOutputDtoPaginationOutputDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<TitleOutputDtoPaginationOutputDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? TitleOutputDtoPaginationOutputDto.fromJS(resultData200) : new TitleOutputDtoPaginationOutputDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TitleOutputDtoPaginationOutputDto>(<any>null);
    }

    /**
     * @return Success
     */
    getList(): Observable<TitleOutputDto[]> {
        let url_ = this.baseUrl + "/api/Title/GetList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(<any>response_);
                } catch (e) {
                    return <Observable<TitleOutputDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<TitleOutputDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<TitleOutputDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(TitleOutputDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TitleOutputDto[]>(<any>null);
    }
}

@Injectable()
export class UserOrganizationServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    exportExcelDefault(body: PaginationInputDto | undefined): Observable<FileOutputDto> {
        let url_ = this.baseUrl + "/api/UserOrganization/ExportExcelDefault";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcelDefault(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcelDefault(<any>response_);
                } catch (e) {
                    return <Observable<FileOutputDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileOutputDto>><any>_observableThrow(response_);
        }));
    }

    protected processExportExcelDefault(response: HttpResponseBase): Observable<FileOutputDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileOutputDto.fromJS(resultData200) : new FileOutputDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileOutputDto>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    create(body: UserOrganizationInputDto | undefined): Observable<UserOrganizationOutputDto> {
        let url_ = this.baseUrl + "/api/UserOrganization/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<UserOrganizationOutputDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserOrganizationOutputDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<UserOrganizationOutputDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 ? ProblemDetails.fromJS(resultData400) : new ProblemDetails();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? UserOrganizationOutputDto.fromJS(resultData200) : new UserOrganizationOutputDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserOrganizationOutputDto>(<any>null);
    }

    /**
     * @param organizationId (optional) 
     * @return Success
     */
    getListUserNotDependencyUserOrganization(organizationId: string | undefined): Observable<UserOutputDto[]> {
        let url_ = this.baseUrl + "/api/UserOrganization/GetListUserNotDependencyUserOrganization?";
        if (organizationId === null)
            throw new Error("The parameter 'organizationId' cannot be null.");
        else if (organizationId !== undefined)
            url_ += "organizationId=" + encodeURIComponent("" + organizationId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetListUserNotDependencyUserOrganization(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetListUserNotDependencyUserOrganization(<any>response_);
                } catch (e) {
                    return <Observable<UserOutputDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserOutputDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetListUserNotDependencyUserOrganization(response: HttpResponseBase): Observable<UserOutputDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(UserOutputDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserOutputDto[]>(<any>null);
    }

    /**
     * @param organizationId (optional) 
     * @return Success
     */
    getListUserOrganizationByOrganizationId(organizationId: string | undefined): Observable<UserOrganizationOutputDto[]> {
        let url_ = this.baseUrl + "/api/UserOrganization/GetListUserOrganizationByOrganizationId?";
        if (organizationId === null)
            throw new Error("The parameter 'organizationId' cannot be null.");
        else if (organizationId !== undefined)
            url_ += "organizationId=" + encodeURIComponent("" + organizationId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetListUserOrganizationByOrganizationId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetListUserOrganizationByOrganizationId(<any>response_);
                } catch (e) {
                    return <Observable<UserOrganizationOutputDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserOrganizationOutputDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetListUserOrganizationByOrganizationId(response: HttpResponseBase): Observable<UserOrganizationOutputDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(UserOrganizationOutputDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserOrganizationOutputDto[]>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateTitleUserOrganizationById(body: UpdateTitleUserOrganizationDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/UserOrganization/UpdateTitleUserOrganizationById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateTitleUserOrganizationById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateTitleUserOrganizationById(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateTitleUserOrganizationById(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @return Success
     */
    get(id: string): Observable<UserOrganizationOutputDto> {
        let url_ = this.baseUrl + "/api/UserOrganization/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<UserOrganizationOutputDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserOrganizationOutputDto>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<UserOrganizationOutputDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? UserOrganizationOutputDto.fromJS(resultData200) : new UserOrganizationOutputDto();
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 ? ProblemDetails.fromJS(resultData404) : new ProblemDetails();
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserOrganizationOutputDto>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getAll(body: PaginationInputDto | undefined): Observable<UserOrganizationOutputDtoPaginationOutputDto> {
        let url_ = this.baseUrl + "/api/UserOrganization/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<UserOrganizationOutputDtoPaginationOutputDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserOrganizationOutputDtoPaginationOutputDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<UserOrganizationOutputDtoPaginationOutputDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? UserOrganizationOutputDtoPaginationOutputDto.fromJS(resultData200) : new UserOrganizationOutputDtoPaginationOutputDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserOrganizationOutputDtoPaginationOutputDto>(<any>null);
    }

    /**
     * @return Success
     */
    getList(): Observable<UserOrganizationOutputDto[]> {
        let url_ = this.baseUrl + "/api/UserOrganization/GetList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(<any>response_);
                } catch (e) {
                    return <Observable<UserOrganizationOutputDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserOrganizationOutputDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<UserOrganizationOutputDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(UserOrganizationOutputDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserOrganizationOutputDto[]>(<any>null);
    }

    update(body: UserOrganizationInputDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/UserOrganization/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 ? ProblemDetails.fromJS(resultData404) : new ProblemDetails();
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    delete(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/UserOrganization/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 ? ProblemDetails.fromJS(resultData404) : new ProblemDetails();
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

export class UserOutputDto implements IUserOutputDto {
    id: string;
    userName: string | undefined;
    name: string | undefined;
    surname: string | undefined;
    avatar: string | undefined;

    constructor(data?: IUserOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.userName = data["userName"];
            this.name = data["name"];
            this.surname = data["surname"];
            this.avatar = data["avatar"];
        }
    }

    static fromJS(data: any): UserOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["avatar"] = this.avatar;
        return data; 
    }

    clone(): UserOutputDto {
        const json = this.toJSON();
        let result = new UserOutputDto();
        result.init(json);
        return result;
    }
}

export interface IUserOutputDto {
    id: string;
    userName: string | undefined;
    name: string | undefined;
    surname: string | undefined;
    avatar: string | undefined;
}

export class AuthenticateDto implements IAuthenticateDto {
    userName: string;
    password: string;

    constructor(data?: IAuthenticateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userName = data["userName"];
            this.password = data["password"];
        }
    }

    static fromJS(data: any): AuthenticateDto {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["password"] = this.password;
        return data; 
    }

    clone(): AuthenticateDto {
        const json = this.toJSON();
        let result = new AuthenticateDto();
        result.init(json);
        return result;
    }
}

export interface IAuthenticateDto {
    userName: string;
    password: string;
}

export class AuthenticateOutputDto implements IAuthenticateOutputDto {
    accessToken: string | undefined;
    expire: moment.Moment | undefined;

    constructor(data?: IAuthenticateOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.accessToken = data["accessToken"];
            this.expire = data["expire"] ? moment(data["expire"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AuthenticateOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["expire"] = this.expire ? this.expire.toISOString() : <any>undefined;
        return data; 
    }

    clone(): AuthenticateOutputDto {
        const json = this.toJSON();
        let result = new AuthenticateOutputDto();
        result.init(json);
        return result;
    }
}

export interface IAuthenticateOutputDto {
    accessToken: string | undefined;
    expire: moment.Moment | undefined;
}

export class RegisterUserInputDto implements IRegisterUserInputDto {
    surname: string;
    name: string;
    userName: string;
    password: string | undefined;

    constructor(data?: IRegisterUserInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.surname = data["surname"];
            this.name = data["name"];
            this.userName = data["userName"];
            this.password = data["password"];
        }
    }

    static fromJS(data: any): RegisterUserInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterUserInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["surname"] = this.surname;
        data["name"] = this.name;
        data["userName"] = this.userName;
        data["password"] = this.password;
        return data; 
    }

    clone(): RegisterUserInputDto {
        const json = this.toJSON();
        let result = new RegisterUserInputDto();
        result.init(json);
        return result;
    }
}

export interface IRegisterUserInputDto {
    surname: string;
    name: string;
    userName: string;
    password: string | undefined;
}

export class RegisterUserOutputDto implements IRegisterUserOutputDto {
    surname: string;
    name: string;
    userName: string;
    id: string;

    constructor(data?: IRegisterUserOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.surname = data["surname"];
            this.name = data["name"];
            this.userName = data["userName"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): RegisterUserOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterUserOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["surname"] = this.surname;
        data["name"] = this.name;
        data["userName"] = this.userName;
        data["id"] = this.id;
        return data; 
    }

    clone(): RegisterUserOutputDto {
        const json = this.toJSON();
        let result = new RegisterUserOutputDto();
        result.init(json);
        return result;
    }
}

export interface IRegisterUserOutputDto {
    surname: string;
    name: string;
    userName: string;
    id: string;
}

export class FileInputDto implements IFileInputDto {
    name: string | undefined;
    data: string | undefined;
    type: string | undefined;

    constructor(data?: IFileInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.data = data["data"];
            this.type = data["type"];
        }
    }

    static fromJS(data: any): FileInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new FileInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["data"] = this.data;
        data["type"] = this.type;
        return data; 
    }

    clone(): FileInputDto {
        const json = this.toJSON();
        let result = new FileInputDto();
        result.init(json);
        return result;
    }
}

export interface IFileInputDto {
    name: string | undefined;
    data: string | undefined;
    type: string | undefined;
}

export class UpdateUserInfomationInputDto implements IUpdateUserInfomationInputDto {
    userName: string | undefined;
    name: string | undefined;
    surname: string | undefined;

    constructor(data?: IUpdateUserInfomationInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userName = data["userName"];
            this.name = data["name"];
            this.surname = data["surname"];
        }
    }

    static fromJS(data: any): UpdateUserInfomationInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserInfomationInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["name"] = this.name;
        data["surname"] = this.surname;
        return data; 
    }

    clone(): UpdateUserInfomationInputDto {
        const json = this.toJSON();
        let result = new UpdateUserInfomationInputDto();
        result.init(json);
        return result;
    }
}

export interface IUpdateUserInfomationInputDto {
    userName: string | undefined;
    name: string | undefined;
    surname: string | undefined;
}

export class OrganizationInputDto implements IOrganizationInputDto {
    id: string;
    codeValue: string | undefined;
    name: string | undefined;

    constructor(data?: IOrganizationInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.codeValue = data["codeValue"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): OrganizationInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrganizationInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["codeValue"] = this.codeValue;
        data["name"] = this.name;
        return data; 
    }

    clone(): OrganizationInputDto {
        const json = this.toJSON();
        let result = new OrganizationInputDto();
        result.init(json);
        return result;
    }
}

export interface IOrganizationInputDto {
    id: string;
    codeValue: string | undefined;
    name: string | undefined;
}

export class User implements IUser {
    id: string;
    userName: string | undefined;
    normalizedUserName: string | undefined;
    email: string | undefined;
    normalizedEmail: string | undefined;
    emailConfirmed: boolean;
    passwordHash: string | undefined;
    securityStamp: string | undefined;
    concurrencyStamp: string | undefined;
    phoneNumber: string | undefined;
    phoneNumberConfirmed: boolean;
    twoFactorEnabled: boolean;
    lockoutEnd: moment.Moment | undefined;
    lockoutEnabled: boolean;
    accessFailedCount: number;
    surname: string;
    name: string;
    avatar: string | undefined;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.userName = data["userName"];
            this.normalizedUserName = data["normalizedUserName"];
            this.email = data["email"];
            this.normalizedEmail = data["normalizedEmail"];
            this.emailConfirmed = data["emailConfirmed"];
            this.passwordHash = data["passwordHash"];
            this.securityStamp = data["securityStamp"];
            this.concurrencyStamp = data["concurrencyStamp"];
            this.phoneNumber = data["phoneNumber"];
            this.phoneNumberConfirmed = data["phoneNumberConfirmed"];
            this.twoFactorEnabled = data["twoFactorEnabled"];
            this.lockoutEnd = data["lockoutEnd"] ? moment(data["lockoutEnd"].toString()) : <any>undefined;
            this.lockoutEnabled = data["lockoutEnabled"];
            this.accessFailedCount = data["accessFailedCount"];
            this.surname = data["surname"];
            this.name = data["name"];
            this.avatar = data["avatar"];
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["normalizedUserName"] = this.normalizedUserName;
        data["email"] = this.email;
        data["normalizedEmail"] = this.normalizedEmail;
        data["emailConfirmed"] = this.emailConfirmed;
        data["passwordHash"] = this.passwordHash;
        data["securityStamp"] = this.securityStamp;
        data["concurrencyStamp"] = this.concurrencyStamp;
        data["phoneNumber"] = this.phoneNumber;
        data["phoneNumberConfirmed"] = this.phoneNumberConfirmed;
        data["twoFactorEnabled"] = this.twoFactorEnabled;
        data["lockoutEnd"] = this.lockoutEnd ? this.lockoutEnd.toISOString() : <any>undefined;
        data["lockoutEnabled"] = this.lockoutEnabled;
        data["accessFailedCount"] = this.accessFailedCount;
        data["surname"] = this.surname;
        data["name"] = this.name;
        data["avatar"] = this.avatar;
        return data; 
    }

    clone(): User {
        const json = this.toJSON();
        let result = new User();
        result.init(json);
        return result;
    }
}

export interface IUser {
    id: string;
    userName: string | undefined;
    normalizedUserName: string | undefined;
    email: string | undefined;
    normalizedEmail: string | undefined;
    emailConfirmed: boolean;
    passwordHash: string | undefined;
    securityStamp: string | undefined;
    concurrencyStamp: string | undefined;
    phoneNumber: string | undefined;
    phoneNumberConfirmed: boolean;
    twoFactorEnabled: boolean;
    lockoutEnd: moment.Moment | undefined;
    lockoutEnabled: boolean;
    accessFailedCount: number;
    surname: string;
    name: string;
    avatar: string | undefined;
}

export class Organization implements IOrganization {
    id: string;
    createdTime: moment.Moment;
    modifiedTime: moment.Moment | undefined;
    createdUser: string | undefined;
    modifiedUser: string | undefined;
    codeValue: string | undefined;
    name: string | undefined;
    titles: string | undefined;
    userOrganizations: UserOrganization[] | undefined;

    constructor(data?: IOrganization) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.createdTime = data["createdTime"] ? moment(data["createdTime"].toString()) : <any>undefined;
            this.modifiedTime = data["modifiedTime"] ? moment(data["modifiedTime"].toString()) : <any>undefined;
            this.createdUser = data["createdUser"];
            this.modifiedUser = data["modifiedUser"];
            this.codeValue = data["codeValue"];
            this.name = data["name"];
            this.titles = data["titles"];
            if (data["userOrganizations"] && data["userOrganizations"].constructor === Array) {
                this.userOrganizations = [] as any;
                for (let item of data["userOrganizations"])
                    this.userOrganizations.push(UserOrganization.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Organization {
        data = typeof data === 'object' ? data : {};
        let result = new Organization();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdTime"] = this.createdTime ? this.createdTime.toISOString() : <any>undefined;
        data["modifiedTime"] = this.modifiedTime ? this.modifiedTime.toISOString() : <any>undefined;
        data["createdUser"] = this.createdUser;
        data["modifiedUser"] = this.modifiedUser;
        data["codeValue"] = this.codeValue;
        data["name"] = this.name;
        data["titles"] = this.titles;
        if (this.userOrganizations && this.userOrganizations.constructor === Array) {
            data["userOrganizations"] = [];
            for (let item of this.userOrganizations)
                data["userOrganizations"].push(item.toJSON());
        }
        return data; 
    }

    clone(): Organization {
        const json = this.toJSON();
        let result = new Organization();
        result.init(json);
        return result;
    }
}

export interface IOrganization {
    id: string;
    createdTime: moment.Moment;
    modifiedTime: moment.Moment | undefined;
    createdUser: string | undefined;
    modifiedUser: string | undefined;
    codeValue: string | undefined;
    name: string | undefined;
    titles: string | undefined;
    userOrganizations: UserOrganization[] | undefined;
}

export class Title implements ITitle {
    id: string;
    createdTime: moment.Moment;
    modifiedTime: moment.Moment | undefined;
    createdUser: string | undefined;
    modifiedUser: string | undefined;
    codeValue: string | undefined;
    name: string | undefined;

    constructor(data?: ITitle) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.createdTime = data["createdTime"] ? moment(data["createdTime"].toString()) : <any>undefined;
            this.modifiedTime = data["modifiedTime"] ? moment(data["modifiedTime"].toString()) : <any>undefined;
            this.createdUser = data["createdUser"];
            this.modifiedUser = data["modifiedUser"];
            this.codeValue = data["codeValue"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): Title {
        data = typeof data === 'object' ? data : {};
        let result = new Title();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdTime"] = this.createdTime ? this.createdTime.toISOString() : <any>undefined;
        data["modifiedTime"] = this.modifiedTime ? this.modifiedTime.toISOString() : <any>undefined;
        data["createdUser"] = this.createdUser;
        data["modifiedUser"] = this.modifiedUser;
        data["codeValue"] = this.codeValue;
        data["name"] = this.name;
        return data; 
    }

    clone(): Title {
        const json = this.toJSON();
        let result = new Title();
        result.init(json);
        return result;
    }
}

export interface ITitle {
    id: string;
    createdTime: moment.Moment;
    modifiedTime: moment.Moment | undefined;
    createdUser: string | undefined;
    modifiedUser: string | undefined;
    codeValue: string | undefined;
    name: string | undefined;
}

export class UserOrganization implements IUserOrganization {
    id: string;
    createdTime: moment.Moment;
    modifiedTime: moment.Moment | undefined;
    createdUser: string | undefined;
    modifiedUser: string | undefined;
    organizationId: string;
    titleId: string;
    userId: string;
    user: User;
    organization: Organization;
    title: Title;

    constructor(data?: IUserOrganization) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.createdTime = data["createdTime"] ? moment(data["createdTime"].toString()) : <any>undefined;
            this.modifiedTime = data["modifiedTime"] ? moment(data["modifiedTime"].toString()) : <any>undefined;
            this.createdUser = data["createdUser"];
            this.modifiedUser = data["modifiedUser"];
            this.organizationId = data["organizationId"];
            this.titleId = data["titleId"];
            this.userId = data["userId"];
            this.user = data["user"] ? User.fromJS(data["user"]) : <any>undefined;
            this.organization = data["organization"] ? Organization.fromJS(data["organization"]) : <any>undefined;
            this.title = data["title"] ? Title.fromJS(data["title"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UserOrganization {
        data = typeof data === 'object' ? data : {};
        let result = new UserOrganization();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdTime"] = this.createdTime ? this.createdTime.toISOString() : <any>undefined;
        data["modifiedTime"] = this.modifiedTime ? this.modifiedTime.toISOString() : <any>undefined;
        data["createdUser"] = this.createdUser;
        data["modifiedUser"] = this.modifiedUser;
        data["organizationId"] = this.organizationId;
        data["titleId"] = this.titleId;
        data["userId"] = this.userId;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["organization"] = this.organization ? this.organization.toJSON() : <any>undefined;
        data["title"] = this.title ? this.title.toJSON() : <any>undefined;
        return data; 
    }

    clone(): UserOrganization {
        const json = this.toJSON();
        let result = new UserOrganization();
        result.init(json);
        return result;
    }
}

export interface IUserOrganization {
    id: string;
    createdTime: moment.Moment;
    modifiedTime: moment.Moment | undefined;
    createdUser: string | undefined;
    modifiedUser: string | undefined;
    organizationId: string;
    titleId: string;
    userId: string;
    user: User;
    organization: Organization;
    title: Title;
}

export class OrganizationOutputDto implements IOrganizationOutputDto {
    id: string;
    codeValue: string | undefined;
    name: string | undefined;
    titles: string | undefined;
    userOrganizations: UserOrganization[] | undefined;
    createdTime: moment.Moment;

    constructor(data?: IOrganizationOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.codeValue = data["codeValue"];
            this.name = data["name"];
            this.titles = data["titles"];
            if (data["userOrganizations"] && data["userOrganizations"].constructor === Array) {
                this.userOrganizations = [] as any;
                for (let item of data["userOrganizations"])
                    this.userOrganizations.push(UserOrganization.fromJS(item));
            }
            this.createdTime = data["createdTime"] ? moment(data["createdTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): OrganizationOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrganizationOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["codeValue"] = this.codeValue;
        data["name"] = this.name;
        data["titles"] = this.titles;
        if (this.userOrganizations && this.userOrganizations.constructor === Array) {
            data["userOrganizations"] = [];
            for (let item of this.userOrganizations)
                data["userOrganizations"].push(item.toJSON());
        }
        data["createdTime"] = this.createdTime ? this.createdTime.toISOString() : <any>undefined;
        return data; 
    }

    clone(): OrganizationOutputDto {
        const json = this.toJSON();
        let result = new OrganizationOutputDto();
        result.init(json);
        return result;
    }
}

export interface IOrganizationOutputDto {
    id: string;
    codeValue: string | undefined;
    name: string | undefined;
    titles: string | undefined;
    userOrganizations: UserOrganization[] | undefined;
    createdTime: moment.Moment;
}

export class ProblemDetails implements IProblemDetails {
    type: string | undefined;
    title: string | undefined;
    status: number | undefined;
    detail: string | undefined;
    instance: string | undefined;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.type = data["type"];
            this.title = data["title"];
            this.status = data["status"];
            this.detail = data["detail"];
            this.instance = data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data; 
    }

    clone(): ProblemDetails {
        const json = this.toJSON();
        let result = new ProblemDetails();
        result.init(json);
        return result;
    }
}

export interface IProblemDetails {
    type: string | undefined;
    title: string | undefined;
    status: number | undefined;
    detail: string | undefined;
    instance: string | undefined;
}

export class TitleInputDto implements ITitleInputDto {
    id: string;
    codeValue: string | undefined;
    name: string | undefined;

    constructor(data?: ITitleInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.codeValue = data["codeValue"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): TitleInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new TitleInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["codeValue"] = this.codeValue;
        data["name"] = this.name;
        return data; 
    }

    clone(): TitleInputDto {
        const json = this.toJSON();
        let result = new TitleInputDto();
        result.init(json);
        return result;
    }
}

export interface ITitleInputDto {
    id: string;
    codeValue: string | undefined;
    name: string | undefined;
}

export class TitleOrganizationInputDto implements ITitleOrganizationInputDto {
    id: string;
    listTitle: TitleInputDto[] | undefined;

    constructor(data?: ITitleOrganizationInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            if (data["listTitle"] && data["listTitle"].constructor === Array) {
                this.listTitle = [] as any;
                for (let item of data["listTitle"])
                    this.listTitle.push(TitleInputDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TitleOrganizationInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new TitleOrganizationInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (this.listTitle && this.listTitle.constructor === Array) {
            data["listTitle"] = [];
            for (let item of this.listTitle)
                data["listTitle"].push(item.toJSON());
        }
        return data; 
    }

    clone(): TitleOrganizationInputDto {
        const json = this.toJSON();
        let result = new TitleOrganizationInputDto();
        result.init(json);
        return result;
    }
}

export interface ITitleOrganizationInputDto {
    id: string;
    listTitle: TitleInputDto[] | undefined;
}

export enum OptionCriteriaRequest {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export class CriteriaRequestDto implements ICriteriaRequestDto {
    property: string | undefined;
    option: OptionCriteriaRequest;
    value: string | undefined;

    constructor(data?: ICriteriaRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.property = data["property"];
            this.option = data["option"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): CriteriaRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new CriteriaRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["property"] = this.property;
        data["option"] = this.option;
        data["value"] = this.value;
        return data; 
    }

    clone(): CriteriaRequestDto {
        const json = this.toJSON();
        let result = new CriteriaRequestDto();
        result.init(json);
        return result;
    }
}

export interface ICriteriaRequestDto {
    property: string | undefined;
    option: OptionCriteriaRequest;
    value: string | undefined;
}

export class PaginationInputDto implements IPaginationInputDto {
    maxCountResult: number;
    skipCount: number;
    sorting: string | undefined;
    listCriteria: CriteriaRequestDto[] | undefined;

    constructor(data?: IPaginationInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.maxCountResult = data["maxCountResult"];
            this.skipCount = data["skipCount"];
            this.sorting = data["sorting"];
            if (data["listCriteria"] && data["listCriteria"].constructor === Array) {
                this.listCriteria = [] as any;
                for (let item of data["listCriteria"])
                    this.listCriteria.push(CriteriaRequestDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PaginationInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginationInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxCountResult"] = this.maxCountResult;
        data["skipCount"] = this.skipCount;
        data["sorting"] = this.sorting;
        if (this.listCriteria && this.listCriteria.constructor === Array) {
            data["listCriteria"] = [];
            for (let item of this.listCriteria)
                data["listCriteria"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PaginationInputDto {
        const json = this.toJSON();
        let result = new PaginationInputDto();
        result.init(json);
        return result;
    }
}

export interface IPaginationInputDto {
    maxCountResult: number;
    skipCount: number;
    sorting: string | undefined;
    listCriteria: CriteriaRequestDto[] | undefined;
}

export class FileOutputDto implements IFileOutputDto {
    id: string | undefined;
    name: string | undefined;
    data: string | undefined;
    type: string | undefined;

    constructor(data?: IFileOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.data = data["data"];
            this.type = data["type"];
        }
    }

    static fromJS(data: any): FileOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new FileOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["data"] = this.data;
        data["type"] = this.type;
        return data; 
    }

    clone(): FileOutputDto {
        const json = this.toJSON();
        let result = new FileOutputDto();
        result.init(json);
        return result;
    }
}

export interface IFileOutputDto {
    id: string | undefined;
    name: string | undefined;
    data: string | undefined;
    type: string | undefined;
}

export class OrganizationOutputDtoPaginationOutputDto implements IOrganizationOutputDtoPaginationOutputDto {
    items: OrganizationOutputDto[] | undefined;
    totalCount: number;

    constructor(data?: IOrganizationOutputDtoPaginationOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(OrganizationOutputDto.fromJS(item));
            }
            this.totalCount = data["totalCount"];
        }
    }

    static fromJS(data: any): OrganizationOutputDtoPaginationOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrganizationOutputDtoPaginationOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data; 
    }

    clone(): OrganizationOutputDtoPaginationOutputDto {
        const json = this.toJSON();
        let result = new OrganizationOutputDtoPaginationOutputDto();
        result.init(json);
        return result;
    }
}

export interface IOrganizationOutputDtoPaginationOutputDto {
    items: OrganizationOutputDto[] | undefined;
    totalCount: number;
}

export class TitleOutputDto implements ITitleOutputDto {
    id: string;
    codeValue: string | undefined;
    name: string | undefined;

    constructor(data?: ITitleOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.codeValue = data["codeValue"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): TitleOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new TitleOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["codeValue"] = this.codeValue;
        data["name"] = this.name;
        return data; 
    }

    clone(): TitleOutputDto {
        const json = this.toJSON();
        let result = new TitleOutputDto();
        result.init(json);
        return result;
    }
}

export interface ITitleOutputDto {
    id: string;
    codeValue: string | undefined;
    name: string | undefined;
}

export class TitleOutputDtoPaginationOutputDto implements ITitleOutputDtoPaginationOutputDto {
    items: TitleOutputDto[] | undefined;
    totalCount: number;

    constructor(data?: ITitleOutputDtoPaginationOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(TitleOutputDto.fromJS(item));
            }
            this.totalCount = data["totalCount"];
        }
    }

    static fromJS(data: any): TitleOutputDtoPaginationOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new TitleOutputDtoPaginationOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data; 
    }

    clone(): TitleOutputDtoPaginationOutputDto {
        const json = this.toJSON();
        let result = new TitleOutputDtoPaginationOutputDto();
        result.init(json);
        return result;
    }
}

export interface ITitleOutputDtoPaginationOutputDto {
    items: TitleOutputDto[] | undefined;
    totalCount: number;
}

export class UserOrganizationInputDto implements IUserOrganizationInputDto {
    id: string;
    organizationId: string;
    titleId: string;
    userId: string;

    constructor(data?: IUserOrganizationInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.organizationId = data["organizationId"];
            this.titleId = data["titleId"];
            this.userId = data["userId"];
        }
    }

    static fromJS(data: any): UserOrganizationInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserOrganizationInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["organizationId"] = this.organizationId;
        data["titleId"] = this.titleId;
        data["userId"] = this.userId;
        return data; 
    }

    clone(): UserOrganizationInputDto {
        const json = this.toJSON();
        let result = new UserOrganizationInputDto();
        result.init(json);
        return result;
    }
}

export interface IUserOrganizationInputDto {
    id: string;
    organizationId: string;
    titleId: string;
    userId: string;
}

export class UserInfoUserOrganizationDto implements IUserInfoUserOrganizationDto {
    userName: string | undefined;
    name: string | undefined;
    surname: string | undefined;

    constructor(data?: IUserInfoUserOrganizationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userName = data["userName"];
            this.name = data["name"];
            this.surname = data["surname"];
        }
    }

    static fromJS(data: any): UserInfoUserOrganizationDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserInfoUserOrganizationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["name"] = this.name;
        data["surname"] = this.surname;
        return data; 
    }

    clone(): UserInfoUserOrganizationDto {
        const json = this.toJSON();
        let result = new UserInfoUserOrganizationDto();
        result.init(json);
        return result;
    }
}

export interface IUserInfoUserOrganizationDto {
    userName: string | undefined;
    name: string | undefined;
    surname: string | undefined;
}

export class InfoOrganizationInUserOrganizationDto implements IInfoOrganizationInUserOrganizationDto {
    name: string | undefined;
    codeValue: string | undefined;

    constructor(data?: IInfoOrganizationInUserOrganizationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.codeValue = data["codeValue"];
        }
    }

    static fromJS(data: any): InfoOrganizationInUserOrganizationDto {
        data = typeof data === 'object' ? data : {};
        let result = new InfoOrganizationInUserOrganizationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["codeValue"] = this.codeValue;
        return data; 
    }

    clone(): InfoOrganizationInUserOrganizationDto {
        const json = this.toJSON();
        let result = new InfoOrganizationInUserOrganizationDto();
        result.init(json);
        return result;
    }
}

export interface IInfoOrganizationInUserOrganizationDto {
    name: string | undefined;
    codeValue: string | undefined;
}

export class InfoTitleInUserOrganizationDto implements IInfoTitleInUserOrganizationDto {
    codeValue: string | undefined;
    name: string | undefined;

    constructor(data?: IInfoTitleInUserOrganizationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.codeValue = data["codeValue"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): InfoTitleInUserOrganizationDto {
        data = typeof data === 'object' ? data : {};
        let result = new InfoTitleInUserOrganizationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["codeValue"] = this.codeValue;
        data["name"] = this.name;
        return data; 
    }

    clone(): InfoTitleInUserOrganizationDto {
        const json = this.toJSON();
        let result = new InfoTitleInUserOrganizationDto();
        result.init(json);
        return result;
    }
}

export interface IInfoTitleInUserOrganizationDto {
    codeValue: string | undefined;
    name: string | undefined;
}

export class UserOrganizationOutputDto implements IUserOrganizationOutputDto {
    id: string;
    organizationId: string;
    titleId: string;
    userId: string;
    user: UserInfoUserOrganizationDto;
    organization: InfoOrganizationInUserOrganizationDto;
    title: InfoTitleInUserOrganizationDto;

    constructor(data?: IUserOrganizationOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.organizationId = data["organizationId"];
            this.titleId = data["titleId"];
            this.userId = data["userId"];
            this.user = data["user"] ? UserInfoUserOrganizationDto.fromJS(data["user"]) : <any>undefined;
            this.organization = data["organization"] ? InfoOrganizationInUserOrganizationDto.fromJS(data["organization"]) : <any>undefined;
            this.title = data["title"] ? InfoTitleInUserOrganizationDto.fromJS(data["title"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UserOrganizationOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserOrganizationOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["organizationId"] = this.organizationId;
        data["titleId"] = this.titleId;
        data["userId"] = this.userId;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["organization"] = this.organization ? this.organization.toJSON() : <any>undefined;
        data["title"] = this.title ? this.title.toJSON() : <any>undefined;
        return data; 
    }

    clone(): UserOrganizationOutputDto {
        const json = this.toJSON();
        let result = new UserOrganizationOutputDto();
        result.init(json);
        return result;
    }
}

export interface IUserOrganizationOutputDto {
    id: string;
    organizationId: string;
    titleId: string;
    userId: string;
    user: UserInfoUserOrganizationDto;
    organization: InfoOrganizationInUserOrganizationDto;
    title: InfoTitleInUserOrganizationDto;
}

export class UpdateTitleUserOrganizationDto implements IUpdateTitleUserOrganizationDto {
    id: string;
    titleId: string;

    constructor(data?: IUpdateTitleUserOrganizationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.titleId = data["titleId"];
        }
    }

    static fromJS(data: any): UpdateTitleUserOrganizationDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTitleUserOrganizationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["titleId"] = this.titleId;
        return data; 
    }

    clone(): UpdateTitleUserOrganizationDto {
        const json = this.toJSON();
        let result = new UpdateTitleUserOrganizationDto();
        result.init(json);
        return result;
    }
}

export interface IUpdateTitleUserOrganizationDto {
    id: string;
    titleId: string;
}

export class UserOrganizationOutputDtoPaginationOutputDto implements IUserOrganizationOutputDtoPaginationOutputDto {
    items: UserOrganizationOutputDto[] | undefined;
    totalCount: number;

    constructor(data?: IUserOrganizationOutputDtoPaginationOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(UserOrganizationOutputDto.fromJS(item));
            }
            this.totalCount = data["totalCount"];
        }
    }

    static fromJS(data: any): UserOrganizationOutputDtoPaginationOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserOrganizationOutputDtoPaginationOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data; 
    }

    clone(): UserOrganizationOutputDtoPaginationOutputDto {
        const json = this.toJSON();
        let result = new UserOrganizationOutputDtoPaginationOutputDto();
        result.init(json);
        return result;
    }
}

export interface IUserOrganizationOutputDtoPaginationOutputDto {
    items: UserOrganizationOutputDto[] | undefined;
    totalCount: number;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}